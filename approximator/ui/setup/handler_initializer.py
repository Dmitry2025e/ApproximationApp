from approximator.utils.log import debug

from approximator.ui.handlers.segment_mouse_handler import SegmentMouseHandler
from approximator.ui.handlers.segment_table_handler import SegmentTableHandler
from approximator.ui.handlers.analysis_setup_handler import AnalysisSetupHandler
from approximator.ui.handlers.import_event_handler import ImportEventHandler


def create_handlers(main_window):
    debug("[handler_initializer] ‚Üí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")

    # üéØ Redraw plot function ‚Äî —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    def redraw_plot(preserve_zoom=False):
        debug(f"[redraw_plot] –ó–∞–ø—É—Å–∫ redraw —Å preserve_zoom={preserve_zoom}")

        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü
        if hasattr(main_window, 'segment_mouse_handler'):
            main_window.segment_mouse_handler._rebuild_boundaries()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ GUI
        time_column = None
        if hasattr(main_window.import_tab, 'time_selector'):
            time_column = main_window.import_tab.time_selector.get_selected()

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç–æ–≥–æ –≤—ã–±–æ—Ä–∞
        if not time_column:
            debug("[redraw_plot] ‚ùå time_column –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏")
            return

        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        main_window.plot_manager.redraw_all_channels(
            df=main_window.state.merged_dataframe,
            x_col=time_column,
            channel_states=main_window.state.channel_states,
            active_channel_name=main_window.state.active_channel_name,
            selected_segment_index=main_window.state.selected_segment_index,
            preserve_zoom=preserve_zoom,
            show_source=main_window.state.show_source_data,
            show_approximation=main_window.state.show_approximation
        )

    # ‚öôÔ∏è Analysis setup handler
    main_window.analysis_setup_handler = AnalysisSetupHandler(
        main_window,
        main_window.state,
        redraw_callback = redraw_plot,
        update_segments_table_callback = lambda: main_window.segment_table_handler.update_table() if hasattr(main_window, 'segment_table_handler') else None,
        update_channels_callback = lambda: main_window.analysis_setup_handler.update_channels_table() if hasattr(main_window, 'analysis_setup_handler') else None
    )

    # üîÑ –ê–Ω–∞–ª–∏–∑ reset
    def analysis_reset():
        debug("[handler_initializer] ‚ü≥ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞")
        if hasattr(main_window, 'analysis_setup_handler'):
            main_window.analysis_setup_handler.update_channels_table()
        if hasattr(main_window, 'segment_table_handler'):
            main_window.segment_table_handler.update_table()
        if hasattr(main_window, 'plot_manager'):
            redraw_plot(preserve_zoom=False)

    # üì• Import handler ‚Äî —Å –ø—Ä—è–º—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    main_window.import_event_handler = ImportEventHandler(
        main_window = main_window,
        app_state = main_window.state,
        data_loader = main_window.data_loader,
        data_merger = main_window.data_merger,
        analysis_setup_handler = main_window.analysis_setup_handler,
        analysis_reset_callback = analysis_reset
    )

    # üìä Segment table handler
    main_window.segment_table_handler = SegmentTableHandler(
        main_window,
        main_window.state,
        main_window.fitter,
        redraw_callback = redraw_plot,
        update_table_callback = lambda: main_window.segment_table_handler.update_table() if hasattr(main_window, 'segment_table_handler') else None,
        get_stitch_params = lambda: {'enabled': False, 'method': 1}
    )

    # üñ±Ô∏è Segment mouse handler
    main_window.segment_mouse_handler = SegmentMouseHandler(
        state = main_window.state,
        plot_manager = main_window.plot_manager,
        redraw_callback = redraw_plot,
        update_table_callback = lambda: main_window.segment_table_handler.update_table() if hasattr(main_window, 'segment_table_handler') else None,
        request_recalc_callback = main_window.request_recalculation
    )

    debug("[handler_initializer] ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")